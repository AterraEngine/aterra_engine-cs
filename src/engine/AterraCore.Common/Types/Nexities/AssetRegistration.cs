// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using System.Reflection;

namespace AterraCore.Common.Types.Nexities;
// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
public record struct AssetRegistration() {
    // Generated by PluginLoader
    public AssetId AssetId { get; init; } = default;

    // Actual type of class
    public Type Type { get; init; }
    public IEnumerable<Type> InterfaceTypes { get; init; } = [];

    // Data from IAssetAttribute
    public CoreTags CoreTags { get; init; } = 0;

    // Data from IAssetTagAttribute
    public IEnumerable<string> StringTags { get; init; } = [];

    // Data from AbstractOverwritesAssetTagAttribute
    public IEnumerable<AssetId> OverridableAssetIds { get; init; } = [];

    private ConstructorInfo? _constructor = null;
    public ConstructorInfo Constructor => _constructor ??= Type.GetConstructors().First();

    // ReSharper disable once TypeWithSuspiciousEqualityIsUsedInRecord.Global
    public object[]? ConstructorParameters { get; set; } = null;
    
    
    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    public bool IsSingleton() => CoreTags.HasFlag(CoreTags.Singleton);
}
